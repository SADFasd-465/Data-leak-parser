import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

public class DataLeakChecker {

    private static final String API_URL = "https://haveibeenpwned.com/api/v3/breachedaccount/";
    private static final String API_KEY = System.getenv("HIBP_API_KEY");  // Чтение API-ключа из переменной окружения

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        // Пример списка логинов для проверки
        List<String> usernames = Arrays.asList(
                "testuser123",
                "exampleuser456",
                "anotheruser789"
        );

        // Создаем пул потоков для параллельной обработки
        ExecutorService executor = Executors.newFixedThreadPool(5);
        List<Callable<Void>> tasks = new ArrayList<>();

        // Добавляем задачи в пул потоков
        for (String username : usernames) {
            tasks.add(() -> {
                try {
                    checkDataBreach(username);
                } catch (Exception e) {
                    System.err.println("Error checking data breach for " + username + ": " + e.getMessage());
                }
                return null;
            });
        }

        // Запускаем все задачи
        List<Future<Void>> futures = executor.invokeAll(tasks);

        // Ожидаем завершения всех задач
        for (Future<Void> future : futures) {
            future.get();
        }

        // Закрываем пул потоков
        executor.shutdown();
    }

    public static void checkDataBreach(String username) throws Exception {
        // Проверка на наличие API-ключа
        if (API_KEY == null || API_KEY.isEmpty()) {
            throw new IllegalStateException("API key is missing. Set the HIBP_API_KEY environment variable.");
        }

        // Формируем запрос для API
        String urlString = API_URL + username;

        // Создаем URL и подключаемся
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Настройка заголовков
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Java Data Leak Checker");
        connection.setRequestProperty("hibp-api-key", API_KEY); // API-ключ из переменной окружения

        // Проверяем код ответа
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Если ответ не пустой, это значит, что данные утекли
            if (response.length() > 0) {
                System.out.println("The account '" + username + "' has been found in the following breaches:");
                System.out.println(response.toString());
            } else {
                System.out.println("The account '" + username + "' has not been found in any known breaches.");
            }
        } else {
            System.err.println("Error: Unable to fetch data for " + username + ", HTTP Code: " + responseCode);
        }
    }
}
